apply plugin: EndToEndTestsPlugin

def copyDockerfiles = tasks.register("copyDockerfiles", Copy) {
    from(project.rootDir)
    include("customer-service/customer-service-main/Dockerfile", "order-service/order-service-main/Dockerfile", "api-gateway-service/api-gateway-service-main/Dockerfile")
    into(project.layout.buildDirectory.dir("generated/sources/dockerfiles"))
}

// Create a dependency on the Dockerfiles without using them

sourceSets {
    endToEndTest {
        resources.srcDir copyDockerfiles
    }
}

dependencies {
    testImplementation project(":customer-service:customer-service-api-web")
    testImplementation project(":order-service:order-service-api-web")
    testImplementation project(":order-service:order-service-api-messaging")
    testImplementation project(":api-gateway-service:api-gateway-service-api-web")
    testImplementation "io.eventuate.examples.common:eventuate-examples-common-money:$eventuateCommonExamplesVersion"

    testImplementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation "org.springframework.boot:spring-boot-starter-test"

    testImplementation "io.eventuate.util:eventuate-util-test"

    // TODO shouldn't need to do this too
    endToEndTestImplementation "org.testcontainers:testcontainers:$testContainersVersion"
    endToEndTestImplementation "io.eventuate.platform.testcontainer.support:eventuate-platform-testcontainer-support-service:$eventuatePlatformTestContainerSupportVersion"
    endToEndTestImplementation "io.eventuate.cdc:eventuate-cdc-testcontainers"
    endToEndTestImplementation "io.eventuate.common:eventuate-common-testcontainers"
    endToEndTestImplementation "io.eventuate.messaging.kafka:eventuate-messaging-kafka-testcontainers"
    endToEndTestImplementation "org.springframework.boot:spring-boot-starter-thymeleaf"
}

endToEndTest.dependsOn(":customer-service:customer-service-main:assemble", ":order-service:order-service-main:assemble", ":api-gateway-service:api-gateway-service-main:assemble")
check.shouldRunAfter(":customer-service:customer-service-main:check")
check.shouldRunAfter(":order-service:order-service-main:check")
check.shouldRunAfter(":api-gateway-service:api-gateway-service-main:check")

endToEndTest {
    if (project.hasProperty('endToEndTestMode'))
        systemProperty "endToEndTestMode", endToEndTestMode

}

task runApplication(type: JavaExec) {
    group = "Execution"
    description = "Run the application"
    classpath = sourceSets.endToEndTest.runtimeClasspath
    mainClass = "io.eventuate.examples.tram.sagas.ordersandcustomers.application.CustomersAndOrdersMain"
    systemProperty "logback.debug", "true"
    systemProperty "eventuate.servicecontainer.serviceimage.version", version
    systemProperty "eventuate.servicecontainer.baseimage.version", eventuateExamplesBaseImageVersion
    systemProperty "server.port", "0"
}

runApplication.dependsOn(":customer-service:customer-service-main:assemble", ":order-service:order-service-main:assemble", ":api-gateway-service:api-gateway-service-main:assemble")
