buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.9.2"
    }
}


apply plugin: 'docker-compose'

subprojects {

    apply plugin: "java-library"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

    dependencies {
        implementation(platform("io.eventuate.platform:eventuate-platform-dependencies:$eventuatePlatformVersion"))

        implementation(platform("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"))
        implementation(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
        testImplementation "junit:junit:4.13.2"

        constraints {
            implementation "org.springdoc:springdoc-openapi-ui:$springDocOpenApiUiVersion"
        }

        testImplementation "org.springframework.boot:spring-boot-starter-test"

    }
}

dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion
    environment.put "EVENTUATE_SAGA_VERSION", eventuateTramSagasImageVersion
    environment.put "EVENTUATE_JAVA_BASE_IMAGE_VERSION", eventuateExamplesBaseImageVersion
    environment.put "EVENTUATE_MESSAGING_KAFKA_IMAGE_VERSION", eventuateMessagingKafkaImageVersion
    environment.put "SERVICE_IMAGE_VERSION", version


    if (project.ext.has("envFile")) {
        environment.put "ENV_FILE", project.ext.envFile
    }

    mysqlinfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]
        startedServices = ["cdc-service", "zipkin"]
    }
    mysql {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]

        if (project.hasProperty('startedServices'))
          startedServices= project.ext.startedServices.split(',')
    }

    mysqlShardedOutboxes {
        environment.put "EVENTUATE_OUTBOX_TABLES", "8"
        environment.put "EVENTUATE_CDC_PROFILES", "EventuatePolling"

        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]

        if (project.hasProperty('startedServices'))
          startedServices= project.ext.startedServices.split(',')
    }

    postgresinfrastructure {
        projectName = null
        useComposeFiles = ["docker-compose-postgres.yml"]
        startedServices = ["cdc-service"]
    }
    postgres {
        projectName = null
        useComposeFiles = ["docker-compose-postgres.yml"]
    }

}

tasks*.each { t ->
    if (t.name.endsWith("ComposeUp") || t.name.endsWith("ComposeBuild"))
        subprojects.each {
            if (it.name.endsWith("-service") || it.name.endsWith("-service-main")) {
                t.dependsOn(":" + it.name + ":assemble")
            }
        }
}


mysqlComposeUp.dependsOn(mysqlinfrastructureComposeUp)

task buildAndStartServicesMySql(type: GradleBuild) {
    tasks = ["mysqlComposeUp"]
}

task endToEndTests(type: GradleBuild) {
    tasks = [":end-to-end-tests:test"]
}

endToEndTests.dependsOn(mysqlComposeUp)
endToEndTests.dependsOn(":end-to-end-tests:cleanTest")

task stopServicesMySql(type: GradleBuild) {
    tasks = ["mysqlComposeDown"]
}
